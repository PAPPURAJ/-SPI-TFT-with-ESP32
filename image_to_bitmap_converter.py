#!/usr/bin/env python3
"""
SPI TFT with ESP32 Image Converter
Converts any image to a C array bitmap format for ESP32 TFT displays

Usage:
    python3 image_to_bitmap_converter.py input_image.jpg output_name

Example:
    python3 image_to_bitmap_converter.py my_photo.jpg my_photo
    This creates: my_photo_bitmap.h
"""

import sys
import os
from PIL import Image

def rgb565(r, g, b):
    """Convert RGB888 to RGB565 format"""
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3)

def image_to_bitmap_c_array(image_file, output_name, width=320, height=480):
    """
    Convert image to 16-bit bitmap C array format
    
    Args:
        image_file: Path to input image (JPG, PNG, etc.)
        output_name: Base name for output files (without extension)
        width: Target width in pixels (default: 320)
        height: Target height in pixels (default: 480)
    """
    try:
        # Check if input file exists
        if not os.path.exists(image_file):
            print(f"‚ùå Error: Input file '{image_file}' not found!")
            return False
        
        # Open and process image
        print(f"üì∏ Opening image: {image_file}")
        img = Image.open(image_file)
        original_size = img.size
        print(f"üìè Original size: {original_size[0]}x{original_size[1]} pixels")
        
        # Resize to target dimensions
        img = img.resize((width, height), Image.LANCZOS)
        print(f"üîÑ Resized to: {width}x{height} pixels")
        
        # Convert to RGB if needed
        if img.mode != 'RGB':
            print(f"üé® Converting from {img.mode} to RGB")
            img = img.convert('RGB')
        
        # Create output filename
        output_file = f"{output_name}_bitmap.h"
        
        # Generate C array
        print(f"üíæ Creating C array file: {output_file}")
        with open(output_file, 'w') as f:
            # Write header comments
            f.write(f"// Converted from {image_file}\n")
            f.write(f"// Original size: {original_size[0]}x{original_size[1]} pixels\n")
            f.write(f"// Target size: {width}x{height} pixels\n")
            f.write(f"// Format: 16-bit RGB565 bitmap\n")
            f.write(f"// Generated by SPI TFT with ESP32 Image Converter\n\n")
            
            # Write array declaration
            f.write(f"const uint16_t {output_name}_bitmap[] = {{\n")
            
            # Convert each pixel to RGB565
            pixels_written = 0
            total_pixels = width * height
            
            for y in range(height):
                f.write("  ")
                for x in range(width):
                    r, g, b = img.getpixel((x, y))
                    color565 = rgb565(r, g, b)
                    f.write(f"0x{color565:04X}")
                    
                    # Add comma if not the last pixel
                    if pixels_written < total_pixels - 1:
                        f.write(", ")
                    
                    pixels_written += 1
                    
                    # Add newline every 16 pixels for readability
                    if (pixels_written % 16 == 0) and (pixels_written < total_pixels):
                        f.write("\n  ")
                
                # Add newline at end of each row
                if y < height - 1:
                    f.write("\n")
            
            f.write("\n};\n\n")
            
            # Write size constants
            f.write(f"const int {output_name}_bitmap_width = {width};\n")
            f.write(f"const int {output_name}_bitmap_height = {height};\n")
        
        # Success message
        print(f"‚úÖ Successfully created {output_file}")
        print(f"üìä Array name: {output_name}_bitmap")
        print(f"üìê Array size: {width}x{height} pixels")
        print(f"üíæ Total pixels: {total_pixels:,}")
        print(f"üì¶ File size: {os.path.getsize(output_file):,} bytes")
        
        # Usage instructions
        print(f"\nüöÄ Usage in Arduino code:")
        print(f"   #include \"{output_file}\"")
        print(f"   tft.pushImage(0, 0, {output_name}_bitmap_width, {output_name}_bitmap_height, {output_name}_bitmap);")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Main function to handle command line arguments"""
    print("üñºÔ∏è  SPI TFT with ESP32 Image Converter")
    print("=" * 50)
    
    # Check command line arguments
    if len(sys.argv) < 3:
        print("‚ùå Usage: python3 image_to_bitmap_converter.py <input_image> <output_name> [width] [height]")
        print("\nüìù Examples:")
        print("   python3 image_to_bitmap_converter.py photo.jpg my_photo")
        print("   python3 image_to_bitmap_converter.py image.png my_image 240 320")
        print("\nüìã Default dimensions: 320x480 (portrait mode)")
        return
    
    # Get arguments
    input_file = sys.argv[1]
    output_name = sys.argv[2]
    width = int(sys.argv[3]) if len(sys.argv) > 3 else 320
    height = int(sys.argv[4]) if len(sys.argv) > 4 else 480
    
    # Validate dimensions
    if width <= 0 or height <= 0:
        print("‚ùå Error: Width and height must be positive numbers!")
        return
    
    if width > 1000 or height > 1000:
        print("‚ö†Ô∏è  Warning: Large dimensions may create very large files!")
        response = input("Continue? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Conversion cancelled.")
            return
    
    # Convert image
    success = image_to_bitmap_c_array(input_file, output_name, width, height)
    
    if success:
        print(f"\nüéâ Conversion completed successfully!")
        print(f"üìÅ Output file: {output_name}_bitmap.h")
    else:
        print(f"\nüí• Conversion failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
